[["introduction.html", "2 Introduction 2.1 What Even is Interactive Data Visualization? 2.2 Mathematical Theory 2.3 Components of a Data Visualization System", " 2 Introduction 2.1 What Even is Interactive Data Visualization? If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck. […] The irony is that while the phrase is often cited as proof of abductive reasoning, it is not proof, as the mechanical duck is still not a living duck Duck Test entry, (Wikipedia 2022) What is interactive data visualization? Surprisingly, despite the widespread popularity of interactive visualizations, if you ask researchers, you may get many different and at times even incongruent answers (see e.g. Dimara and Perin 2019; Elmqvist et al. 2011; Pike et al. 2009). Within the literature, the terms “interactive” and “interaction” are used in many different ways and across a wide variety of contexts, with an explicit definition being rarely given. The lack of a clear consensus about what “interactive data visualization” is makes the task of discussing existing work challenging. On one hand, ignoring the issue might leave the reader confused about the relevant concepts. On the other, a comprehensive account of the terminology surrounding interactive data visualization would almost surely become too dense; entire research papers have been dedicated to this topic (see e.g. Dimara and Perin 2019; Elmqvist et al. 2011). Therefore, in the following section, I have tried to strike a balance by providing a concise yet informative-enough account of how interactivity has been conceptualized within the existing literature. Ultimately, the goal is to provide the reader with context and define what the terms “interactive” and “interaction” should mean for the scope of the present thesis. The following section is laid out as follows. I start with a brief overview of the history of the field, of data visualization more generally and interactive data visualization more specifically. Then I discuss the different ways the term “interactive data visualization” has been used throughout the literature, and finally I arrive at a working definition of interactivity for the scope of the present thesis. 2.1.1 Brief History of Interactive Data Visualization 2.1.1.1 Early Interactive Data Visualization: By Statisticians for Statisticians Static data visualization has a rich and intricate history, and a full treatment would be beyond the scope of the current thesis (but see e.g. Dix and Ellis 1998; Friendly 2006; Friendly and Wainer 2021; Young, Valero-Mora, and Friendly 2011). Suffice it to say, prior to the second half of the 20th century, data visualization was largely seen as, at best, secondary to “serious” statistical analysis, although there were indeed some prominent counter-examples (Friendly 2006; Young, Valero-Mora, and Friendly 2011). However, beginning with the end of 1950’s, a series of developments lead to a great increase in prominence of data visualization. Firstly, at the theoretical level, the work of Tukey (1962; 1977) and Bertin (1967) established data visualization as valuable discipline in its own right. Secondly, at the practical level, the development of personal computers (see e.g. Abbate 1999) and high-level programming languages, most notably FORTRAN in 1954 (Backus 1978), lead to the proliferation of powerful and widely available tools that made the process of rendering production-grade figures near-effortless, in comparison to the earlier hand-drawn techniques. Combined, these developments lead to a surge in the use and dissemination of data visualization. Interactive visualizations would not be left far behind. Early systems of the 1960’s and 1970’s tended to be designed for one specialized task, such as the one of Fowlkes (1969) which allowed for interactive viewing of probability plots under different choices of parameters and transformations, and that of Kruskal (1965) which visualized multidimensional scaling. The first more general-purpose system was PRIM-9 (Fisherkeller, Friedman, and Tukey 1974), which allowed for exploration of high-dimensional data via projection, rotation, subsetting and masking. The systems that came after grew to be even more general and ambitious. For example, MacSpin (Donoho, Donoho, and Gasko 1988) and XGobi (Swayne, Cook, and Buja 1998) provided features such as interactive scaling, rotation, linked selection (or “brushing”), and interactive plotting of smooth fits in scatterplots, as well as interactive parallel coordinate plots and grand tours (excellent video-documentaries of some of these early interactive data visualization systems are available at ASA Statistical Graphics Video Library). Later systems saw even greater flexibility and also integration into general statistical computing software. The successor system to XGobi, GGobi (Swayne et al. 2003), expanded on XGobi and made it directly embeddable in the R runtime. Mondrian (Theus 2002) written in Java allowed for sophisticated linked interaction between many different types of plots including scatteplots, histograms, barplots, scatterplot, mosaic plots, parallel coordinates plots, and maps. Finally, iPlots (Urbanek and Theus 2003) implemented a general framework for interactive plotting that was not only embedded in R but could be directly programmatically manipulated, and was later further expanded and made performant for big data in iPlots eXtreme (Urbanek 2011). What all of these interactive data visualization systems had in common is that they were designed by statisticians and with interesting, often ambitious interactive features in mind. High-level analytic features such as linked selection/brushing, rotation and projection, and interactive manipulation of model parameters made frequent appearances. While being a clear strength, the more complex nature of the systems may have also slowed their adoption, as they often demanded an expert user to take advantage of most fully. 2.1.1.2 Interactive Data Visualization and the Web: Interactivity for Everyone The tail end of the millennium would mark the arrival of a whole new class of technologies that would have a significant impact on interactive data visualization, just as it had on almost every other field of human endeavor. The arrival of the internet in the mid 1990’s, and the development of JavaScript in 1995 as a high-level programming language for the Web (for a thorough description of the history, see e.g. Wirfs-Brock and Eich 2020), saw the rise of interactive applications that could be accessed by anyone, from anywhere. This was aided by the dissemination of robust and standardized Web browsers. Soon, interactive data visualization became just one of many interactive technologies highly sought after within the fledgling Web ecosystem. Early interactive data visualization systems for the Web, such as Prefuse (Heer, Card, and Landay 2005) and Flare (developed around 2008, Blokt 2020) tended to relied on external plugins (Java and Adobe Flash Player, respectively). However, as browsers got faster at interpreting JavaScript, thanks to advances in compiler technologies, specifically Just In Time (JIT) compilation, it became possible to write entire data visualization libraries in JavaScript. In the late 2000’s and early 2010’s, several true Web-native interactive data visualization systems emerged. Currently, the most prominent framework for data visualization on the Web, interactive or otherwise, is D3.js (Bostock 2022). D3 is a fairly general and low-level JavaScript framework for visualizing data, and consists of a suite of specialized modules designed for various aspects of the data visualization workflow, including parsing data, transformation, defining scales, interfacing with the DOM and handling interaction events, and even physics simulation and animation. Importantly, while D3 does provide methods for handling interactive events, it does not provide a system for dispatching and coordinating these events - it instead delegates this responsibility to the user and encourages the use of reactive Web frameworks such as React (Meta 2024), Vue (Evan You and the Vue Core Team 2024), or Svelte (Rich Harris and the Svelte Core Team 2024). Finally, D3.js visualizations are rendered as Scalable Vector Graphics (SVG) by default, meaning that they can be scaled without loss of quality. However, a price to pay for this robustness is in performance, as visualizations can become slow to render at high data volumes. The modular nature of D3 means that the visualizations can be rendered by other, more performant devices, such as the HTML 5 Canvas element or WebGL, however, as of this date, the implementation of such an alternative rendering framework is left to the user and there are no official modules. Building upon the fairly low level framework provided by D3, many packages have been developed to provide a more high-level and opinionated interfaces. Prominent two among these are plotly.js (Plotly Inc. 2022) and Highcharts (Highsoft 2024). While D3 provides low-level utilities such as data transformations, scales, and geometric objects, these packages provide more high-level utilities such as functions for rendering complete plots and registering reactive events, which are under the hood automatically handled via systems based on the native DOM Event Target interface (MDN 2024). Like D3, both plotly.js and Highcharts also render the graphics in SVG by default, however, unlike D3, they both also provide alternative rendering engines based on WebGL (Highsoft 2022; Plotly Inc. 2024). A somewhat different approach is taken by another popular visualization package built partially on D3 - Vega (Satyanarayan et al. 2015; Vega Project 2024b). Vega provides a declarative framework for defining (interactive) data visualizations using a static JSON schema. Compared to plotly.js or Highcharts, Vega is significantly more expressive, allowing for fine-grained customization of graphics and interactive behavior, standing essentially just one level above D3. However, as a consequence, it is also significantly more verbose. For example, a full specification of a scatterplot matrix with linked brushing takes over 300 lines of code (JSON, not including the data and using default formatting such as would be created by calling JSON.stringify(schema, null, \"\\t\"), Vega Project 2024a). While these contemporary Web-based interactive data visualization systems offer great deal of flexibility and customizability, I argue that this comes at the cost of making them practical for applied researchers and data scientists. Most importantly, it seems that there is some ambiguity about what counts as interactive features. For example, in the R Graph Gallery entry on Interactive Charts (Holtz 2022), which features several examples of interactive visualization derived from the above-mentioned JavaScript interactive data visualization libraries, the visualizations feature interactions such zooming, panning, hovering, 3D rotation, and repositioning a node within a network graph. However, in all of these examples, the user only manipulates surface-level graphical attributes of a single plot. In contrast, the Plotly Dash documentation page on Interactive Visualizations (Plotly Inc. 2022) does feature two examples of linked hovering and cross-filtering, i.e. examples of linked interactivity. However, it should be noted that vast majority of visualizations in the Plotly R Open Source Graphing Library documentation page (Plotly Inc. 2022) allow for only surface-level interactions. Similarly, VegaLite Gallery pages on Interactive Charts and Interactive Multiview Displays (Vega Project 2022) feature many examples, however, only a few show limited examples of linked or parametric interactivity. Finally, the Highcharter Showcase Page (Kunst 2022) does not feature any examples of linking or parametric interactivity. What all of the packages listed above have in common is that most featured interaction is typically surface-level and takes place within a single plot, and the few examples that feature interesting types of interactivity (linked or parametric) often require a complicated setup. The main reason for this is most likely that all of these packages have been designed to be very general-purpose and flexible, and the price to pay for this flexibility is that complex types of interactivity require complex code. Another reason is that these packages have been built for static visualizations first, and interactivity second. Further, since all of these packages are native to JavaScript, the expectation may be that if more interesting types of interactivity are desired, the interactive “back-end” may be written separately, outside of the package. Finally, the typical use case for these packages seems to be presentation, not EDA. Be it as it may, there is a fairly high barrier for entry for creating interesting types of interactivity (i.e. linked or parametric) with these packages. This may not be an issue for large organizations which can afford to hire computer science specialists to work on complex interactive dashboards and visualizations full-time. However, to the average applied scientist or data scientist, the upfront cost of producing a useful interactive data visualization may be too high, especially if one is only interested in exploratory data analysis for one’s own benefit. This may be the reason why interactive visualizations are nowadays mainly used for data communication, not data exploration (Batch and Elmqvist 2017). On a higher level, the current options for interactive data visualization may reflect a broader cultural differences between Computer Science and Statistics, where Computer Science may be more oriented towards business and large-team collaboration, whereas Statistics may be more focused on applied research and individual/small-team workflow. 2.1.2 Interactive vs. Interacting With First, when we say “interactive data visualization”, are we referring to a concrete figure or chart or are we referring to the process of interacting with a visualization? In other words, does the word “visualization” in the term play the role of a noun or a nominalized verb? Here already we can see a significant overloading of the term (Dimara and Perin 2019; Pike et al. 2009; see also Yi et al. 2007). The split between these two meanings is quite noticeable within the interactive data visualization literature. On one hand, there are some papers which focus on the mathematical and computational aspects of interactive data visualization, discussing specific systems and implementations (see e.g. Buja, Cook, and Swayne 1996; Kelleher and Levkowitz 2015; Leman et al. 2013; Wills 2008). On the other hand, there are papers which approach the topic from a more cognitive or human-computer interaction (HCI) point of view: exploring what impact different kinds of visualization and interaction styles have on the user’s ability to derive insights from the data (see e.g. Dimara and Perin 2019; Dix and Ellis 1998; Pike et al. 2009; Quadri and Rosen 2021; Yi et al. 2007). There is of course a significant overlap between these two uses of the term “interactive data visualization”: most papers discuss both concrete implementations of interactive data visualization systems and the user’s actions and experiences while using those systems. Nevertheless, the fact that the term is used to refer to both the user’s actions and experiences as well as the object of these actions and experiences can make can make literature search complicated - whenever searching for any subtopic within one of the two fields, one will inevitably find hits from the other. It also highlights an important fact about interactive data visualization as a research area: rather than being a single field, it is actually an intersection of several different fields, including statistics, computer science, applied mathematics, business analytics, human-computer interaction, and cognitive psychology (Dimara and Perin 2019). While I do plan to discuss some elementary features of the psychology of interacting with visualizations, when used throughout this thesis, the term “interactive data visualization” will refer to concrete charts or figures, typically displayed on a computer screen. When referring to the practice of interactive data visualization, I will attempt to use more active phrasing such as “interacting with a visualization” or “user’s interaction with a visualization”, to indicate that what is being referred to is the activity or process of visualization, rather than any concrete object or implementation. 2.1.3 The Bar for Interactivity But even when we take the term “interactive data visualization” to mean concrete charts or figures, the meaning still remains ambiguous. What is the bar for calling a figure “interactive”? What features should an interactive figure have? Among data visualization researchers, there are considerable differences of opinion, such that the same figure may be considered interactive by some but not by others. And these differences are important - they are not just a matter of opinion or aesthetic taste. When building interactive data visualization systems, what we consider “interactive” has a profound impact on the implementation details and requirements of the system. Consider a scatterplot with a color palette widget that can be used to select the color of the points. Does such a feature justify the scatterplot being called an “interactive data visualization”? There are some researchers who will answer affirmatively - for them, interactivity is something fundamental, and if the user is able to manipulate some visual aspect of the figure, that’s enough to call the visualization interactive. To some, almost any user manipulation qualifies (Brodbeck, Mazza, and Lalanne 2009). Other researchers emphasize speed of the computer’s responses to user interaction, with faster updates translating to greater interactivity (Becker and Cleveland 1987; Buja, Cook, and Swayne 1996). Complicating matters further, some of these researchers also make the distinction between “interactive” and “dynamic” manipulation, where interactive manipulation involves discrete actions such as pressing a button or selecting an item from a drop-down menu, whereas dynamic manipulation involves continuous actions, like moving a slider or clicking-and-dragging to highlight a rectangular area (Rheingans 2002; Jankun-Kelly, Ma, and Gertz 2007; see also Dimara and Perin 2019). Yet, for other researchers, simple features such as changing the color of points in a scatterplot are far too low of a bar. For many, true interactivity hinges on high-level analytic features which allow the practitioner to derive insights from the data which would be much harder or time-intensive to derive from static visualizations. These features include the ability to generate different views of the data (by e.g. zooming, panning, sorting, and filtering), and the reactive propagation of changes between connected or “linked” parts of a figure (Kehrer et al. 2012; Buja, Cook, and Swayne 1996; Keim 2002; Unwin 1999). Similarly, in visual analytics research, a distinction is made between “surface-level” (or “low-level”) and “parametric” (or “high-level”) interactions, where surface-level interactions manipulate attributes of the visual domain only (e.g. zooming and panning), whereas parametric interactions manipulate attributes of mathematical models or algorithms underlying the visualization (Leman et al. 2013; Pike et al. 2009). Table 2.1 summarizes the several ways of defining interactivity as discussed above. Note that the list is not supposed to be exhaustive; more complete taxonomies of interactive visualization systems and features have been described before (see e.g. Dimara and Perin 2019; Yi et al. 2007). Instead, I want to use the list to broadly summarize the ways researchers have thought about interactivity, and to have a place to refer the reader to when discussing these ideas later on in the text. Table 2.1: Table 2.2: Definitions of Interactivity Feature Details User interaction The user can interactively manipulate the visualization in some way Real-time updates The user’s interactions propagate into the visualization with little to no lag Plot- and data-space manipulation The user can interactively explore different parts of the data set by doing actions which effectively amount to “subsetting” rows of the data (e.g. zooming, panning, and filtering) Linked views The visualization consists of connected or “linked” parts and the user’s interactions with one part propagate to the other parts (e.g. linked highlighting) Parametric updates The user can manipulate the parameters of some underlying mathematical model or algorithm (e.g. histogram bins, grand tour projections, etc…) 2.1.4 Interactivity and Implementation The different definitions of interactivity are not just differences in opinion or taste - they also imply radically different implementation requirements. To start with a perhaps slightly over-exaggerated example, many programming languages come equipped with a read-evaluate-print loop (REPL) which can be used to interactively execute code from the command line. The user writes code, presses ENTER, and the language interpreter evaluates the code, returns any output, and waits for more input from the user. Now, if the language in question supports plotting, then, under the permissive “user interaction” definition, it could be argued that even the act of running code from a command line to produce new plots could be considered an “interactive data visualization system”, since the user’s interaction with the REPL produces changes to the visual output. And, hypothetically, if the user could type fast enough, they would see the updates appear almost instantly, satisfying the “real-time update” definition. Does this mean that every programming language which has a REPL and supports plotting automatically ships with an interactive data visualization system? I would argue that no: most people nowadays probably do not consider the command line to be an interactive data visualization system. But perhaps it has not always been this way. Several decades ago, the command line played a much bigger role as an interactive user interface (see e.g. Foley 1990; Howard and MacEachren 1995). Compared to waiting seconds or minutes for code to compile, a REPL is indeed a much more interactive experience. However, with the rise in processor speed and the proliferation of highly interactive graphical user interfaces (GUIs), users have come to expect visualizations that can be interacted with directly (Dimara and Perin 2019). As such, our perceptions of what is “interactive” are not constant but change over time; as technologies improve, we come to expect more direct and responsive user interfaces. Now, let’s set the somewhat exaggerated example of the REPL aside, and focus on what today would be considered more “typical” examples interactive data visualization systems. That is, systems in which the user can interact with the visualizations directly, by pressing keys or mouse buttons. Then, there still are considerable differences in what different features imply for implementation requirements. There are features which manipulate visual attributes of the plot only, independent of the data. These include, for example, changing the size, color, or opacity of points in a scatterplot. Features like this are usually fairly simple to implement because they do not affect the underlying data representation: a point displays the same data (as indicated by its xy-coordinates) no matter whether it is green or orange. Also, these graphical-only features typically do not require specialized data structures, and have low time- and space-complexity: for example, when interactively changing the opacity of points in a scatterplot, we only need to update one scalar value - the points’ opacity - and as such most of the user-experienced time will be spent re-rendering, rather than on any computation. In contrast, some interactive features require specialized data structures and additional computation, above and beyond what would be required for a static plot. For example, each time the user engages in interactive features such as filtering, linked highlighting, or parametric interaction, entirely new summaries of the underlying data may need to be computed. When a user selects several points in a linked scatterplot, we first have to find the ids of all the corresponding cases, recompute the statistics underlying all other linked plots (such as counts/sums in barplots or histograms), and only then can we re-render the plot. Likewise, if we interactively manipulate a histogram’s binwidth, we need to recompute the number of cases in each bin each time the binwidth changes. To maintain the illusion of smooth, “continuous” interaction (Dimara and Perin 2019), these computations need to happen fast enough, and as such, computational efficiency becomes imperative. 2.1.5 Working Definition of Interactivity Clearly, when building interactive data visualization systems, what we choose to call “interactive” has significant implications for what the users will be able to do and how much work will be required to implement the system. So how do we go about deciding what we should consider “interactive”? There are essentially two modes of visualizing data. In statistics, the goal of data visualization is to facilitate rapid, accurate, and effective data exploration. However, it is not always the case that more complex visuals necessarily translate to better statistical insights. In static visualization, it is a well-established fact that plots can include sophisticated-looking and seemingly appealing features which do not promote the acquisition of statistical insights in any way (Cairo 2014, 2019; Gelman and Unwin 2013; Tufte 2001). Similarly, adding interactivity to a visualization does not always improve its statistical legibility (see e.g. Abukhodair et al. 2013; Franconeri et al. 2021). I propose to approach interactive features the same way we treat visual features in static visualization. Specifically, I propose the following working definition: To justify being called an “interactive data visualization”, the interactive features in a visualization should promote statistical understanding. If we accept this proposition, then there are several important consequences that follow. First, we must favour high-level, data-dependent, parametric interactions over the purely graphical ones. That is not to say that purely graphical interactive features are not useful. For example, in the presence of overplotting, manipulating size or alpha of objects can help us features (areas of high density) that would otherwise remain hidden. Likewise, zooming and panning, while often being counted among the more high-level features, require manipulation of existing axis limits only and can be done without reference to the original data. Still, I argue that the ability to see new summaries of the data is what makes some interactive data visualizations systems ultimately more powerful (and also more challenging to implement). The interactive features that enable this, such as filtering, linked highlighting, and parameter manipulation, go beyond aesthetics, and empower the users to explore the data dynamically, uncovering hidden patterns and relationships that may otherwise remain hidden. 2.1.6 Common Interactive Features This section describes several common types of interactive features that facilitate interactive data exploration. 2.2 Mathematical Theory The main idea of the present thesis is that the mathematical properties of the statistical summaries underlying our visualizations determine which interactive features will be “well-behaved” and vice versa. Therefore, a foundational understanding of these properties is necessary to be able to delve into the problem deeper. It is important to note that the topic touches some fairly fundamental concepts, such as functions and orders, which may be already familiar to some readers. Thus, an overly detailed treatment may risk becoming tedious. On the other hand, too concise of a treatment may leave the connections to some of the more abstract mathematical structures, such as monoids, groups, and functors, unclear. To address this issue, I will try to present each concept in a concise but fairly thorough way. Readers already familiar with these concepts are encouraged to skip or skim the relevant sections. To discuss the core ideas of the present thesis, it is necessary to first lay out some relevant mathematical theory. Indeed, one of these core ideas is that the mathematical properties of the statistical summaries in our visualizations determine what types of interactions “make sense” and vice versa, and, as such, we cannot delve into the problem without first discussing these properties. However, since the topic at hand touches some fairly fundamental mathematical structures and concepts, such as functions and orders, a thorough treatment may run the risk of boring the reader who is already familiar with them. On the other hand, without a thorough treatment, the connections to some of the other concepts from the more abstract branches of mathematics (abstract algebra/group theory/category theory), such as monoids, groups, and functors, may be lost on some readers. To find a way out of this predicament, I propose the following: I will lay out the fundamental theory as thoroughly as I see fit. A reader who is familiar with these topics is advised to skip them. Throughout the rest of the text, I will make a heavy use of cross-references such that when the various concepts are mentioned, the reader can go and refer back to them. The material in this chapter follows mainly from Fong and Spivak (2019), Lawvere and Schanuel (2009), Baez (2023), and Milewski (2018). Interested reader is advised to seek out these references, especially Fong and Spivak (2019) and Lawvere and Schanuel (2009), as they provide an accessible introduction to the topic. 2.2.1 Past Application of Category Theory to Data Visualization I want to make a quick note on how data visualization has been related to category theory in the past. There have a few papers which have related category theory to data visualizations in a very abstract way, with the authors trying to lay down theoretical foundations for what it means to “visualize” (Beckmann 1995) or which visualizations can be considered well-formed perceptual representations of the data (Kindlmann and Scheidegger 2014). There have also a handful of papers which have discussed category theory and data visualization in the context of functional programming, with authors introducing new functional programming libraries and domain-specific languages which allow for constructing plots and figures in a functionally compositional style (see e.g. Yorgey 2012; Petricek 2021; Smeltzer, Erwig, and Metoyer 2014; Smeltzer and Erwig 2018). The present thesis attempts to do neither. The focus is neither on the more abstract questions about the visualization process, nor am I aiming to present a new functional programming library for data visualization; the R package accompanying the thesis is not written in a functional style, barring a few quirks and style choices made by the author. Instead, the focus is on the mathematical properties of one specific component of data visualizations: the statistical summaries underlying the visualizations. 2.2.2 Relations Relations are some of the simplest mathematical structures. Given two sets \\(X\\) and \\(Y\\), a relation \\(R\\) between \\(X\\) and \\(Y\\) is a subset of the Cartesian product of the two sets, \\(R \\subseteq X \\times Y\\). In other words, a relation can be thought of as the set of \\((x, y)\\) pairs \\(\\in X \\times Y\\) for which the condition that “\\(x\\) and \\(y\\) relate” is true. Note that \\(X\\) and \\(Y\\) can also be the same set, such that \\(R \\subseteq X \\times X\\). Since a relation is a subset of the product set \\(X \\times Y\\), we can display it as a matrix with values of \\(X\\) as rows and values of \\(Y\\) as columns and the pairs \\((x, y)\\) which relate marked in some specific way. For example, here’s how we can display the usual order relation \\(\\leq\\) on the set \\(X = \\{ 1, 2, 3 \\}\\): Figure 2.1: Relations as a subset of the Cartesian product on two sets. From the diagram, we see that 1 is less than or equal to every element of y, 2 is less than or equal to 2 and 3, and 3 is less than or equal to 3 only. Note the symmetry between rows and columns - this is due to the fact that we have the same set (\\(X\\)) on both dimensions. Under some relation \\(R\\), if two elements \\(x, y \\in X\\) relate, i.e. if \\((x, y) \\in R\\), we can write this using the infix notation using some infix symbol such as \\(\\star\\): then, if \\(x\\) and \\(y\\) relate, we write \\(x \\star_R y\\) or \\(x \\star y\\) (\\(R\\) implicit). For example, for common relations such as \\(=\\), \\(\\leq\\), we write \\(x = y\\) or \\(x \\leq y\\). \\(R\\) is also sometimes used, e.g. \\(x R y\\). If the elements do not relate, i.e. \\((x, y) \\not \\in R\\), we typically do not write this out explicitly. Relations can have properties. For example, many types of relations are reflexive, meaning that \\(x \\star x\\) for all \\(x \\in X\\) (every element relates to itself). Of note, specifying three specific properties allow us to define equivalence relations: Definition 2.1 (Equivalence relation) A relation \\(\\sim\\) on \\(X\\) is called an equivalence relation if it is: Reflexive: \\(x \\sim x\\) for all \\(x \\in X\\) Symmetric: \\(x \\sim y\\) if and only if \\(y \\sim x\\) for all \\(x, y \\in X\\) Transitive: if \\(x \\sim y\\) and \\(y \\sim z\\), then \\(x \\sim z\\) Equivalence relations encode the notion that two things are same-ish. We can further use them to assign objects in \\(X\\) to equivalence classes, which group equivalent objects together. That is, for some element \\(a \\in X\\), its corresponding equivalence class is: \\[[a] = \\{ x \\in X : x \\sim a \\}\\] We can do a lot of things with relations. The next few sections will discuss three important examples: functions, partitions, and preorders. 2.2.3 Functions A function is a special kind of relation that encodes a mapping between two sets. More specifically, let \\(S\\) be the set of sources (also called the domain) and \\(T\\) be the set of possible targets (also called the codomain). Then, we can think of a function as a relation \\(F \\subseteq S \\times T\\) of valid source-target pairs \\((s, t)\\), such that for every \\(s \\in S\\) in there exists a unique \\(t \\in T\\) with \\((s, t) \\in F\\) (see Figure 2.2). In other words, every source relates to exactly one target, see Figure 2.2: Figure 2.2: Function as a subset of the Cartesian product on domain (\\(S\\)) and codomain (\\(T\\)). The subset \\(F \\subseteq S \\times T\\) is shown in red. In words, the function is \\(F: \\{ 1, 2, 3 \\} \\to \\{ 1, 2, 3 \\}\\), such that \\(F(1) = 1\\), \\(F(2) = 1\\), and \\(F(3) = 2\\), e.g. \\(f(x) = \\lfloor x / 2 \\rceil\\) (divide by two and round). Note that, for any function, there must be exactly one red dot in each column (each source maps to one and only one target), however, there may be zero or many red dots in any row (some target may not be reachable, or they may be reachable from multiple sources). We can classify functions based on how their domains and codomains map onto each other (see Figure 2.3). If every target in the function’s codomain has a path leading to it from some source, such that no target remains unreachable, then we call it a surjective or onto function. More formally: Definition 2.2 (Surjectivity) A function \\(f\\) is surjective if, for all \\(t \\in T\\), there exists a \\(s \\in S\\) such that \\(f(s) = t\\). Alternatively, if each source in the function’s domain leads to a unique target, then we call such a function injective or one-to-one. That is: Definition 2.3 (Injectivity) A function is injective if for all \\(s_1, s_2 \\in S\\), if \\(f(s_1) = t\\) and \\(f(s_2) = t\\), then \\(s_1 = s_2\\). Finally, if a function is both surjective and injective, meaning that every target can be reached from, and only from, a unique source, then we call such a function bijective or a bijection. Definition 2.4 (Bijectivity) A function is a bijection and only if it is both surjective and injective, and if and only if it is invertible. Figure 2.3: Types of functions. Left: in a surjective function, every target can be reached from some source. Middle: in an injective function, every target can only be reached from a unique source. Right: in a bijection, every target can be reached from, and only from, a unique source. Bijections are special since they encode the idea of reversibility or lossless transformation. Any bijective function \\(f\\) has an associated inverse function \\(f^{-1}\\) such that \\(f^{-1}(f(x)) = x\\) and \\(f(f^{-1}(a)) = a\\) for all \\(x\\) and \\(a\\) in the function’s domain and codomain, respectively, and we can keep switching back and forth from domain to codomain and back without losing any information. We’ll generalize this idea later when we discuss isomorphisms. As an example, suppose I have a group of friends \\(f \\in F\\) that each went to one city \\(c \\in C\\) in Europe during the holiday. I can construct a function \\(f: F \\to C\\) that sends each friend to his or her holiday destination. If every city in \\(C\\) was visited by at least one friend, then the function is surjective. If each friend went to a different destination, then the function is injective. If both are true - that is, if every city on our list was visited by exactly one friend - then the function is bijective. In that case, we could just as well use the names of cities \\(c \\in C\\) when we speak of friends \\(f \\in F\\) - instead of “Sam”, we could say “the person who went to Rome”, and it would be clear who are we talking about. An important property of functions is that they can be composed. Specifically, if the domain of one function matches the codomain of another, the functions can be composed by piping the output of one into another to form a new function: Definition 2.5 (Function composition) If we have two functions \\(f: X \\to Y\\) and \\(g: Y \\to Z\\), we can form a new function \\(h: X \\to Z\\) such that: \\[h(x) = g(f(x))\\] We can omit the explicit reference to the variable \\(x\\) and write the composition in several different ways: \\(h = g \\circ f\\) (read: “apply \\(g\\) after \\(f\\)”) \\(h = gf\\) (same as above) \\(h = f ⨾ g\\) (read “apply \\(f\\) then \\(g\\)”) I will use the bracket notation (\\(h(x) = g(f(x))\\)) when explicitly referring to the variable, and the postfix/fat semicolon notation (\\(h = f ⨾ g\\)) otherwise. There are other things we can do with functions. For example, given a subset of sources, we can ask about the image - the set of targets we can reach from those sources: Definition 2.6 (Image) For some subset \\(S_i \\subseteq S\\), its image under \\(f\\) is defined as \\(f_!(S_i) = \\{ f(s) \\in T \\lvert s \\in S_i \\}\\). Likewise, given a subset of targets, we can ask about the pre-image - the set of sources that could have produced those targets. That is: Definition 2.7 (Pre-image) For some subset \\(T_i \\subseteq T\\), its pre-image under \\(f\\) is defined as \\(f^*(T_i) = \\{ s \\in S \\lvert f(s) \\in T_i \\}\\). An important fact to note is that, although the pre-image \\(f^*\\) is also sometimes called “inverse image”, it is not the inverse of the image \\(f_!\\) for most functions (unless they are bijections). That is, by applying the pre-image after image or vice versa, we cannot expect to come up with the same set as we started with. Specifically, if we have a non-injective function and apply the pre-image after the image, we may come up with more sources that we started with, \\(S_i \\subseteq f^*(f_!(S_i))\\) (equality if injective), and similarly, if we have a non-surjective function and apply the image after the pre-image, we might end up with fewer targets than we started with, \\(f_!(f^*(T_i)) \\subseteq T_i\\) (again, equality if surjective). As an example, suppose again I have the function \\(f\\) which maps each friend to a holiday destination. The image of that function, \\(f_!\\), maps a set of friends to the set of all cities that at least one of them went to, and similarly, the pre-image, \\(f^*\\), maps a set of cities to the set of friends that went to them. Now, suppose that Sam and Dominic went to Rome, and I ask: “who went to [the city that Sam went to]?” I will get both Sam and Dominic back, since: \\[f^*(f_!(\\{ Sam \\})) = f^*(\\{ Rome \\}) = \\{ Sam, Dominic \\}\\] That is, I will get back Sam and Dominic even though I had initially only asked about Sam. Similarly, if no friends had visited Paris and I ask: “what are the cities that [people who went to Paris or Rome] went to?” then I will get Rome only, since \\[f_!(f^*(\\{Paris, Rome \\})) = f_!(\\{ Sam, Dominic \\}) = \\{ Rome \\}\\] This weird relationship between the the image and the pre-image is due to the fact that the image is actually something called left adjoint (Baez 2023; Fong and Spivak 2019). Adjoints can be thought of as the “best approximate answer to a problem that has no solution” (no inverse, Baez 2023), and they come in pairs - a left and a right adjoint - with the left adjoint being more permissive or “liberal” and the right adjoint being more strict or “conservative” (Baez 2023). Proper treatment of adjoint is beyond the scope of this thesis, however. 2.2.4 Partitions One useful thing we can construct with functions (or equivalently, relations) are partitions. Partitions encode the idea of splitting elements of some some into distinct groups. Definition 2.8 (Function definition of a partition) Given some set \\(X\\), a set of part labels \\(P\\), and a surjective function \\(f: X \\to P\\), we can partition \\(A\\) by assigning every element \\(x \\in X\\) a part label \\(p \\in P\\), by simply applying the function: \\(f(x) = p\\). Above we used a function to define a partition, however, we can achieve the same with a relations, specifically equivalence classes. By taking any part label \\(p \\in P\\), we can recover the corresponding subset of \\(X\\) by pulling out its pre-image: \\(f^*(\\{p\\}) = X_p \\subseteq X\\). We can then define a partition without reference to \\(f\\): Definition 2.9 (Equivalence class definition of a partition) A partition of \\(A\\) consists of a set of part labels \\(P\\), such that, for all \\(p \\in P\\), there is a non-empty subset \\(A_p \\subseteq A\\) which forms an equivalence class on \\(A\\) and: \\[X = \\bigcup_{p \\in P} X_p \\qquad \\text{and} \\qquad \\text{if } p \\neq q, \\text{ then } X_p \\cap X_q = \\varnothing\\] I.e. the parts \\(X_p\\) jointly cover the entirety of \\(X\\) and parts cannot share any elements. We can rank partitions by their coarseness. That is, for any set \\(X\\), the coarsest partition is one with only one part label \\(P = \\{ 1 \\}\\), such that each element of \\(X\\) gets assigned \\(1\\) as label. Conversely, the finest partition is one where each element gets assigned its own unique part label, such that \\(\\lvert X \\lvert = \\lvert P \\lvert\\). Given two partitions, we can form a finer (or at least as fine) partition by taking their intersection, i.e. by taking the set of all unique pairs of labels that co-occur for any \\(x \\in X\\) as the new part labels. For example, suppose \\(X = \\{ 1, 2, 3 \\}\\) and partition 1 assigns part labels: \\[p_1(x) = \\begin{cases} a &amp; \\text{if } x = 1 \\text{ or } x = 2 \\\\ b &amp; \\text{if } x = 3 \\end{cases}\\] and partition 2 assigns part labels the following way: \\[ p_2(a) = \\begin{cases} s &amp; \\text{if } x = 1 \\\\ t &amp; \\text{if } x = 2 \\text{ or } x = 3 \\end{cases} \\] Then the intersection partition will have the following part labels \\(P_3 = \\{ (a, s), (a, t), (b, t) \\}\\) such that: \\[ p_3(a) = \\begin{cases} (a, s) &amp; \\text{if } x = 1 \\\\ (b, s) &amp; \\text{if } x = 2 \\\\ (b, t) &amp; \\text{if } x = 3 \\end{cases} \\] 2.2.5 Preorders Definition 2.10 (Preorder) A preorder is a set \\(X\\) equipped with a binary relation \\(\\leq\\) that conforms to two simple properties: Reflexivity: \\(x \\leq x\\) for all \\(x \\in X\\) Transitivity: if \\(x \\leq y\\) and \\(y \\leq z\\), then \\(x \\leq z\\), for all \\(x, y, z \\in X\\) Simply speaking, this means that between any two elements in \\(X\\), there either is a relation and the elements relate (one element is somehow “less than or equal” to the other), or the two elements do not relate. An example of a preorder is the family tree, with the underlying set being the set of family members: \\(X = \\{ \\textbf{daughter}, \\textbf{son}, \\textbf{mother}, \\textbf{father}, \\textbf{grandmother}, ... \\}\\) and the binary relation being ancestry or familial relation. Thus, for example, \\(\\textbf{daughter} \\leq \\textbf{father}\\), since the daughter is related to the father, and \\(\\textbf{father} \\leq \\textbf{father}\\), since a person is related to themselves. However, there is no relation (\\(\\leq\\)) between \\(\\textbf{father}\\) and \\(\\textbf{mother}\\) since they are not related. Finally, since \\(\\textbf{daughter} \\leq \\textbf{father}\\) and \\(\\textbf{father} \\leq \\textbf{grandmother}\\), then, by reflexivity, \\(\\textbf{daughter} \\leq \\textbf{grandmother}\\). We can further restrict preorders by imposing additional properties, such as: If \\(x \\leq y\\) and \\(y \\leq x\\), then \\(x = y\\) (anti-symmetry) Either \\(x \\leq y\\) or \\(y \\leq x\\) (comparability) If a preorder conforms to 3., we speak of a partially ordered set or poset. If it conforms to both 3. and 4., then it is a total order. 2.2.6 Monoids A monoid is a tuple \\((M, e, \\otimes)\\) consisting of: A set of objects \\(M\\) A neutral element \\(e\\) called the monoidal unit A binary function \\(\\otimes: M \\times M \\to M\\) called the monoidal product Such that: \\(m \\otimes e = e \\otimes m = m\\) for all \\(m \\in M\\) (unitality) \\(m_1 \\otimes (m_2 \\otimes m_3) = (m_1 \\otimes m_2) \\otimes m_3 = m_1 \\otimes m_2 \\otimes m_3\\) for all \\(m_1, m_2, m_3 \\in M\\) (associativity) In simple terms, monoids encapsulate the idea that the whole is exactly the “sum” of its parts (where “sum” can be replaced by the monoidal product). Specifically, we have some elements and a way to combine them, and when we combine the same elements, no matter where we put the brackets we always get the same result (i.e. something like “the order does not matter”, although that is not precisely right, more on that later). Finally, we have some neutral element that when combined with an element yields back the same element. For example, take summation on natural numbers, \\((\\mathbb{N}, 0, +)\\): \\[1 + 0 = 0 + 1 = 1 \\qquad \\text{(unitality)}\\] \\[1 + (2 + 3) = (1 + 2) + 3 = 1 + 2 + 3 \\qquad \\text{(associativity)}\\] Likewise, products of real numbers \\((\\mathbb{R}, 1, \\times)\\) are also a monoid, and so is multiplication of \\(n \\times n\\) square matrices \\((\\mathbf{M}_{n \\in \\mathbb{Z}}, \\mathbf{I}, \\cdot)\\), where \\(\\mathbf{I}\\) is the identity matrix and \\(\\cdot\\) stands for an infix operator that is usually omitted. As a counterexample, exponentiation does not meet the definition of a monoid, since it is not associative: \\(x^{(y^z)} \\neq (x^y)^z\\). There are more exotic forms of monoids as well. For example, the operation of appending a value to a vector and taking the Euclidean norm can also be recast as a monoid: \\[||(||(x, y)||_2, z)||_2 = \\sqrt{\\bigg(\\sqrt{(x^2 + y^2)}\\bigg)^2 + z^2} = \\sqrt{(x^2 + y^2) + z^2} = ||(x, y, z)||_2\\] We may want to impose further restrictions on monoids, for example: \\(m_1 \\otimes m_2 = m_2 \\otimes m_1\\) for all \\(m_1, m_2 \\in M\\) (commutativity) Both commutativity and associativity can both be viewed as a kind of “order does not matter” rule, however, they are fundamentally different. Let’s imagine our set of objects consists of three wires of different colours \\(\\{ \\textbf{red}, \\textbf{green}, \\textbf{blue} \\}\\) and the monoidal product consists of connecting wires. Let’s also imagine that the \\(\\textbf{red}\\) wire is connected to a power source and the \\(\\textbf{blue}\\) wire is connected to a lightbulb, and the blue wire amplifies the current from the power source such that it is enough to power the light bulb. To turn on the lightbulb, we need to connect \\(\\textbf{red} \\to \\textbf{green}\\) and \\(\\textbf{green} \\to \\textbf{blue}\\). The time order in which we connect the three wires does not matter: we can connect \\(\\textbf{green} \\to \\textbf{blue}\\) first and \\(\\textbf{red} \\to \\textbf{green}\\) second or vice versa, either way we get the same result (lightbulb turns on). However, the spatial order in which we connect the wires does matter: if we connect \\(\\textbf{red} \\to \\textbf{blue}\\), then the current will not be enough to power the lightbulb. Hence, the operation is associative (temporal order does not matter) but not commutative (spatial order does matter). If \\(M\\) is a preorder, another restriction we may want to impose is that the monoidal product is strictly increasing: \\(m_1 \\leq m_1 \\otimes m_2\\) and \\(m_2 \\leq m_1 \\otimes m_2\\) for all \\(m_1, m_2 \\in M\\) (monotonicity) This means that when we combine two things, we get back something that’s at least as big as the bigger of the two things. Summation of natural numbers \\((\\mathbb{N}, 0, +)\\) again works, but for example summation of integers \\((\\mathbb{Z}, 0, +)\\) or multiplication of reals \\((\\mathbb{R}, 1, \\times)\\) does not. 2.3 Components of a Data Visualization System 2.3.1 Scales Every data visualization system needs some way of translating abstract data values into concrete graphical attributes such as position, size, or colour. Given the ubiquitous need for scales, one might expect them to be a “solved issue”, within the relevant literature. However, this is far from the truth. Specifically, the issues of scales and measurement present are still being grappled with the areas of mathematics and philosophy of science to this day (for a gentle yet thorough introduction, see Tal 2015). Scales are another area of data visualization in which there has been considerable debate, with many terms being overloaded and relating to concepts from different fields. This is due to the fact that the issue of how to compare, rank, and translate values has a long and complicated history. In particular, the issue of measurement has been hotly debated in the field of psychometrics and mathematical psychology, leading to the development of the theory of measurement (which has some overlap with, but is not the same as, measurement theory in mathematics). One paper that has been key to the debate around scales and measurement has been the seminal work of Stevens (1946). In this paper, Stevens defined a scale as a method of assigning numbers to values, allowing for various kinds of comparisons. Further, by considering transformations which preserve the comparisons, Stevens identified 4 types of scales: nominal, ordinal, interval, and ratio (see also Michell 1986; Velleman and Wilkinson 1993). Table 2.3: Types of scales identified by Stevens (1946) Scale Structure Comparison Valid transformations Nominal Equivalence relation Are \\(x\\) and \\(y\\) the same? \\(x&#39; = f(x)\\) where \\(f\\) is a bijection Ordinal Total order Is \\(x\\) is greater than \\(y\\)? \\(x&#39; = f(x)\\) where \\(f\\) is a monotonically increasing bijection Interval Lebesque measure Is the distance from \\(x\\) to \\(y\\) the same as from \\(a\\) to \\(b\\)? \\(x&#39; = ax + b\\) Ratio How many times is \\(x\\) greater than \\(y\\)? \\(x&#39; = ax\\) Table 2.3 shows a loose reproduction of Table 1 from Stevens (1946). Note that the family of valid transformations gets smaller in each row, meaning that the scales carry more information (Velleman and Wilkinson 1993). Let’s discuss the scales individually. 2.3.1.0.1 Nominal scales Nominal scales correspond to equivalence relations. An equivalence relation is a binary relation \\(\\sim\\) on some set \\(X\\) which, for all \\(x, y, z \\in X\\), has the following properties: Reflexivity: \\(x \\sim x\\) Symmetry: \\(x \\sim y \\text{ if and only if } y \\sim x\\) Transitivity: \\(x \\sim y \\text{ and } y \\sim z \\text{ then } x \\sim z\\) Intuitively, we can think of the numbers on a nominal scale as “labels”, and the only question which we can ask a nominal scale is whether two labels are the same or different. A such, examples of variables with nominal scale include variables of which we typically think of as categorical, such as color, species, or political party. It does not make sense to say “blue is more than green” or “cat is more than dog” without specifying some other axis along which we compare. It does make sense, however, to say “Daisy and Molly are the same species of animal (cat)” or “these two glasses are of different colors”. The only transformations which are permissible for nominal scales are permutations (Stevens 1946). For example, if we use the numbers \\(\\{ 1, 2, 3 \\}\\) to represent the species \\(S = \\{ \\text{cat}, \\text{dog}, \\text{hamster} \\}\\), respectively, we can assign the numbers in any order we want and the properties of the scale are preserved. It is arguable whether any nominal quantities exist in and of themselves or whether they only ever exists as abstract social constructions over underlying continuous reality. Color is a discretization of the visible light spectrum (frequency of electromagnetic radiation), and the pre-Darwinian concept of a species is likewise an abstraction over continuously varying distribution of genes (although there have been some attempts to ground the definition of a discrete species in the theory of genetics, e.g. as a population of individuals which can produce viable offsprings, see Mayr 1999). Further, even many subjective concepts which are typically described as discrete such as emotions may be abstractions over underlying continuous phenomena (Barrett 2013). However, even if nominal quantities are entirely socially constructed, this does not mean they are arbitrary or useless. SEARLE 2.3.1.0.2 Ordinal scales Ordinal scales correspond to total orders. A total order is a relation \\(\\leq\\) on \\(X\\) which, for all \\(x, y, z \\in X\\), has the following properties: Reflexivity: \\(x \\leq x\\) Antisymmetry: \\(\\text{if } x \\leq y \\leq x \\text{ then } x = y\\) Transitivity: \\(x \\leq y \\text{ and } y \\leq z \\text{ then } x \\leq z\\) Totality or comparability or strong connectedness: \\(\\text{for all } x, y, \\text{ either } x \\leq y \\text{ or } y \\leq x\\) Examples of total orders include the usual ordering \\(\\leq\\) on natural numbers \\(\\mathbb{N}\\): \\(1 \\leq 2 \\leq 3 \\leq \\ldots\\) or the alphabetical order on letters: \\(A \\leq B \\leq C \\ldots \\leq Z\\). As total orders, ordinal scales allow us to rank quantities. A good example of an ordinal variable is placement in a race or competition. If Emma and Charlotte ran a marathon, and Emma placed 2nd and Charlotte 3rd, we can say that Charlotte ran finished the race earlier than Emma. However, we do not know whether she crossed the finish line 15 minutes or 2 hours earlier, or whether or not her average pace was less than half of that of Emma. Some authors have related ordinal scales to weak orders (see Michell 1986). Weak orders (also known as total preorders, see nLab 2024a) generalize total orders by allowing for ties (properties 2. and 4. above do not need hold). While this could seem desirable, I opted to relate ordinal scales to total orders here instead, since there is currently some ambiguity in the literature in the way the term weak order is being used (see e.g. nLab 2024b, 2024c; Abrams 2024), and, for practical data analysis, the distinction is fairly inconsequential. For instance, in the marathon example above, if Emma and Charlotte both placed second, after Lucy and before Lily, we could frame the outcome of the race as the following weak order on the set \\(M\\) of marathoners: \\(\\text{Lucy} \\leq \\text{Emma, Charlotte} \\leq \\text{Lily} \\leq ...\\). However, the underlying set of ranks \\(R \\subset \\mathbb{N}\\) still retains a total ordering: \\(1 \\leq 2 \\leq 3 \\leq \\ldots\\) and we can specify a surjective monotonically increasing function \\(r: M \\to R\\) which maps each marathoner to her rank. Clearly, we can map any weak order to a total order by applying a functor which enforces anti-symmetry in this way (Fong and Spivak 2019; nLab 2024a). The only transformations which are permissible for ordinal scales are those which preserve order, that is, monotonic increasing transformations (Stevens 1946; Michell 1986). For example, transforming our set of ranks \\(R\\) by taking the log or square root of each rank leaves the order relations between them unchanged. 2.3.1.0.3 Interval scales Interval scales. Interval scales allow us to identify a distance between two points. However, they do not have a natural “zero point” or intercept. As such we cannot use them to determine the ratio between two quantities. Examples of interval scales include the calendar date and geographical position. It does not make sense to say that the year 1000 CE is “twice” that of 500 CE, since the birth of Jesus Christ is (one’s personal religious beliefs aside) an arbitrary zero point: we could set the point 0 CE to any other event, such as the founding of Athens or the release of Taylor Swift’s first album, and the ratios would be altered. Likewise, it does not make sense to say that 90° longitude is “three times” that of 30° longitude: the location of the prime meridian is also the product of arbitrary historical cirumstances. 2.3.1.0.3.1 Ratio scales Unlike interval scales, ratio scale have a well-defined natural zero point. For example, 2.3.1.0.4 Criticism of On the Theory of Scales of Measurement In the original paper, Stevens had also made the claim that the type of scale determined which statistical tests and summaries were “permissible” for the data. For example, according to Stevens, while mean is an appropriate summary of an interval scale (since expectation is linear), it would not be a permissible summary of ordinal data. This claim was later disputed by researchers References Abbate, J. 1999. “Getting small: a short history of the personal computer.” Proc. IEEE 87 (9): 1695–98. https://doi.org/10.1109/5.784256. Abrams, Dave. 2024. “Total Weak Order Vs Total Order.” Mathematics Stack Exchange. https://math.stackexchange.com/questions/3793222/total-weak-order-vs-total-order. Abukhodair, Felwa A, Bernhard E Riecke, Halil I Erhan, and Chris D Shaw. 2013. “Does Interactive Animation Control Improve Exploratory Data Analysis of Animated Trend Visualization?” In Visualization and Data Analysis 2013, 8654:211–23. SPIE. Backus, John. 1978. “The History of Fortran i, II, and III.” ACM Sigplan Notices 13 (8): 165–80. Baez, John. 2023. “Applied Category Theory Course.” https://math.ucr.edu/home/baez/act_course. Barrett, Lisa Feldman. 2013. “Psychological Construction: The Darwinian Approach to the Science of Emotion.” Emotion Review 5 (4): 379–89. Batch, Andrea, and Niklas Elmqvist. 2017. “The Interactive Visualization Gap in Initial Exploratory Data Analysis.” IEEE Transactions on Visualization and Computer Graphics 24 (1): 278–87. Becker, Richard A, and William S Cleveland. 1987. “Brushing Scatterplots.” Technometrics 29 (2): 127–42. Beckmann, Peter E. 1995. “On the Problem of Visualizing Point Distributions in High Dimensional Spaces.” Computers &amp; Graphics 19 (4): 617–29. Bertin, Jacques. 1967. Sémiologie Graphique: Les diagrammes, les réseaux, les cartes. Gauthier-Villars. Blokt. 2020. “Flare \\(\\vert\\) Data Visualization for the Web.” Blokt - Privacy, Tech, Bitcoin, Blockchain &amp; Cryptocurrency. https://blokt.com/tool/prefuse-flare. Bostock, Mike. 2022. “D3.js - Data-Driven Documents.” https://d3js.org. Brodbeck, Dominique, Riccardo Mazza, and Denis Lalanne. 2009. “Interactive Visualization - A Survey.” In Human Machine Interaction, 27–46. Berlin, Germany: Springer. https://doi.org/10.1007/978-3-642-00437-7_2. Buja, Andreas, Dianne Cook, and Deborah F Swayne. 1996. “Interactive High-Dimensional Data Visualization.” Journal of Computational and Graphical Statistics 5 (1): 78–99. Cairo, Alberto. 2014. “Graphics Lies, Misleading Visuals: Reflections on the Challenges and Pitfalls of Evidence-Driven Visual Communication.” In New Challenges for Data Design, 103–16. Springer. ———. 2019. How Charts Lie: Getting Smarter about Visual Information. WW Norton &amp; Company. Dimara, Evanthia, and Charles Perin. 2019. “What Is Interaction for Data Visualization?” IEEE Transactions on Visualization and Computer Graphics 26 (1): 119–29. Dix, Alan, and Geoffrey Ellis. 1998. “Starting simple: adding value to static visualisation through simple interaction.” In AVI ’98: Proceedings of the working conference on Advanced visual interfaces, 124–34. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/948496.948514. Donoho, Andrew W, David L Donoho, and Miriam Gasko. 1988. “MacSpin: Dynamic Graphics on a Desktop Computer.” IEEE Computer Graphics and Applications 8 (4): 51–58. Elmqvist, Niklas, Andrew Vande Moere, Hans-Christian Jetter, Daniel Cernea, Harald Reiterer, and TJ Jankun-Kelly. 2011. “Fluid Interaction for Information Visualization.” Information Visualization 10 (4): 327–40. Evan You and the Vue Core Team. 2024. “Vue.js.” https://vuejs.org. Fisherkeller, Mary Anne, Jerome H Friedman, and John W Tukey. 1974. “An Interactive Multidimensional Data Display and Analysis System.” SLAC National Accelerator Lab., Menlo Park, CA (United States). Foley, James D. 1990. “Scientific Data Visualization Software: Trends and Directions.” The International Journal of Supercomputing Applications 4 (2): 154–57. Fong, Brendan, and David I Spivak. 2019. An Invitation to Applied Category Theory: Seven Sketches in Compositionality. Cambridge University Press. Fowlkes, EB. 1969. “User’s Manual for a System Fo Active Probability Plotting on Graphic-2.” Tech-Nical Memorandum, AT&amp;T Bell Labs, Murray Hill, NJ. Franconeri, Steven L, Lace M Padilla, Priti Shah, Jeffrey M Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. Friendly, Michael. 2006. “A Brief History of Data Visualization.” In Handbook of Computational Statistics: Data Visualization, edited by C. Chen, W. Härdle, and A Unwin, III???–. Heidelberg: Springer-Verlag. Friendly, Michael, and Howard Wainer. 2021. A History of Data Visualization and Graphic Communication. Harvard University Press. Gelman, Andrew, and Antony Unwin. 2013. “Infovis and Statistical Graphics: Different Goals, Different Looks.” Journal of Computational and Graphical Statistics 22 (1): 2–28. Heer, Jeffrey, Stuart K. Card, and James A. Landay. 2005. “prefuse: a toolkit for interactive information visualization.” In CHI ’05: Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, 421–30. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1054972.1055031. Highsoft. 2022. “Render Millions of Chart Points with the Boost Module Highcharts.” Highcharts. https://www.highcharts.com/blog/tutorials/highcharts-high-performance-boost-module. ———. 2024. “Highcharts - Interactive Charting Library for Developers.” Highcharts Blog \\(\\vert\\) Highcharts. https://www.highcharts.com. Holtz, Yan. 2022. “Interactive charts \\(\\vert\\) the R Graph Gallery.” https://r-graph-gallery.com/interactive-charts.html. Howard, David, and Alan M MacEachren. 1995. “Constructing and Evaluating an Interactive Interface for Visualizing Reliability.” In Congresso Da Associação Cartográfica Internacional–ICA, 17:321–29. Jankun-Kelly, TJ, Kwan-Liu Ma, and Michael Gertz. 2007. “A Model and Framework for Visualization Exploration.” IEEE Transactions on Visualization and Computer Graphics 13 (2): 357–69. Kehrer, Johannes, Roland N Boubela, Peter Filzmoser, and Harald Piringer. 2012. “A Generic Model for the Integration of Interactive Visualization and Statistical Computing Using r.” In 2012 IEEE Conference on Visual Analytics Science and Technology (VAST), 233–34. IEEE. Keim, Daniel A. 2002. “Information Visualization and Visual Data Mining.” IEEE Transactions on Visualization and Computer Graphics 8 (1): 1–8. Kelleher, Curran, and Haim Levkowitz. 2015. “Reactive Data Visualizations.” In Visualization and Data Analysis 2015, 9397:263–69. SPIE. Kindlmann, Gordon, and Carlos Scheidegger. 2014. “An Algebraic Process for Visualization Design.” IEEE Transactions on Visualization and Computer Graphics 20 (12): 2181–90. Kruskal, J. B. 1965. “Multidimensional Scaling.” https://community.amstat.org/jointscsg-section/media/videos. Kunst, Joshua. 2022. Highcharter: A Wrapper for the ’Highcharts’ Library. Lawvere, F William, and Stephen H Schanuel. 2009. Conceptual Mathematics: A First Introduction to Categories. Cambridge University Press. Leman, Scotland C, Leanna House, Dipayan Maiti, Alex Endert, and Chris North. 2013. “Visual to Parametric Interaction (V2pi).” PloS One 8 (3): e50474. Mayr, Ernst. 1999. Systematics and the Origin of Species, from the Viewpoint of a Zoologist. Harvard University Press. MDN. 2024. “EventTarget - Web APIs \\(\\vert\\) MDN.” MDN Web Docs. https://developer.mozilla.org/en-US/docs/Web/API/EventTarget. Meta. 2024. “React.” https://react.dev. Michell, Joel. 1986. “Measurement Scales and Statistics: A Clash of Paradigms.” Psychological Bulletin 100 (3): 398. Milewski, Bartosz. 2018. Category Theory for Programmers. Blurb. nLab. 2024a. “Posetal Reflection in nLab.” https://ncatlab.org/nlab/show/posetal+reflection. ———. 2024b. “Strict Weak Order in nLab.” https://ncatlab.org/nlab/show/strict+weak+order. ———. 2024c. “Weak Order in nLab.” https://ncatlab.org/nlab/show/weak+order. Petricek, Tomas. 2021. “Composable Data Visualizations.” Journal of Functional Programming 31: e13. Pike, William A, John Stasko, Remco Chang, and Theresa A O’connell. 2009. “The Science of Interaction.” Information Visualization 8 (4): 263–74. Plotly Inc. 2022. “Part 4. Interactive Graphing and Crossfiltering \\(\\vert\\) Dash for Python Documentation \\(\\vert\\) Plotly.” https://dash.plotly.com/interactive-graphing. ———. 2024. “Webgl.” https://plotly.com/python/webgl-vs-svg. Quadri, Ghulam Jilani, and Paul Rosen. 2021. “A Survey of Perception-Based Visualization Studies by Task.” IEEE Transactions on Visualization and Computer Graphics. Rheingans, Penny. 2002. “Are We There yet? Exploring with Dynamic Visualization.” IEEE Computer Graphics and Applications 22 (1): 6–10. Rich Harris and the Svelte Core Team. 2024. “Svelte.” https://svelte.dev. Satyanarayan, Arvind, Ryan Russell, Jane Hoffswell, and Jeffrey Heer. 2015. “Reactive Vega: A Streaming Dataflow Architecture for Declarative Interactive Visualization.” IEEE Transactions on Visualization and Computer Graphics 22 (1): 659–68. Smeltzer, Karl, and Martin Erwig. 2018. “A Domain-Specific Language for Exploratory Data Visualization.” In Proceedings of the 17th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences, 1–13. Smeltzer, Karl, Martin Erwig, and Ronald Metoyer. 2014. “A Transformational Approach to Data Visualization.” In Proceedings of the 2014 International Conference on Generative Programming: Concepts and Experiences, 53–62. Stevens, Stanley Smith. 1946. “On the Theory of Scales of Measurement.” Science 103 (2684): 677–80. Swayne, Deborah F., Dianne Cook, and Andreas Buja. 1998. “XGobi: Interactive Dynamic Data Visualization in the X Window System.” J. Comput. Graph. Stat. 7 (1): 113–30. https://doi.org/10.1080/10618600.1998.10474764. Swayne, Deborah F., Duncan Temple Lang, Andreas Buja, and Dianne Cook. 2003. “GGobi: evolving from XGobi into an extensible framework for interactive data visualization.” Comput. Statist. Data Anal. 43 (4): 423–44. https://doi.org/10.1016/S0167-9473(02)00286-4. Tal, Eran. 2015. “Measurement in Science.” Theus, Martin. 2002. “Interactive Data Visualization using Mondrian.” J. Stat. Soft. 7 (November): 1–9. https://doi.org/10.18637/jss.v007.i11. Tufte, Edward R. 2001. The Visual Display of Quantitative Information. Cheshire, Connecticut: Graphics Press LLC. Tukey, John W. 1962. “The Future of Data Analysis.” The Annals of Mathematical Statistics 33 (1): 1–67. Tukey, John W et al. 1977. Exploratory Data Analysis. Vol. 2. Reading, MA. Unwin, Antony. 1999. “Requirements for interactive graphics software for exploratory data analysis.” Comput. Statist. 14 (1): 7–22. https://doi.org/10.1007/PL00022706. Urbanek, Simon. 2011. “iPlots eXtreme: Next-Generation Interactive Graphics Design and Implementation of Modern Interactive Graphics.” Computational Statistics 26 (3): 381–93. Urbanek, Simon, and Martin Theus. 2003. “iPlots: High Interaction Graphics for r.” In Proceedings of the 3rd International Workshop on Distributed Statistical Computing. Citeseer. Vega Project. 2022. “Example Gallery: Interactive.” https://vega.github.io/vega-lite/examples/#interactive. ———. 2024a. “Brushing Scatter Plots Example.” Vega. https://vega.github.io/vega/examples/brushing-scatter-plots. ———. 2024b. “Vega and D3.” Vega. https://vega.github.io/vega/about/vega-and-d3. Velleman, Paul F, and Leland Wilkinson. 1993. “Nominal, Ordinal, Interval, and Ratio Typologies Are Misleading.” The American Statistician 47 (1): 65–72. Wikipedia. 2022. “Duck test - Wikipedia.” https://en.wikipedia.org/w/index.php?title=Duck_test&amp;oldid=1110781513. Wills, Graham. 2008. “Linked Data Views.” In Handbook of Data Visualization, 217–41. ch. II. 9. Springer Berlin/Heidelberg, Germany. Wirfs-Brock, Allen, and Brendan Eich. 2020. “JavaScript: the first 20 years.” Proc. ACM Program. Lang. 4 (HOPL): 1–189. https://doi.org/10.1145/3386327. Yi, Ji Soo, Youn ah Kang, John Stasko, and Julie A Jacko. 2007. “Toward a Deeper Understanding of the Role of Interaction in Information Visualization.” IEEE Transactions on Visualization and Computer Graphics 13 (6): 1224–31. Yorgey, Brent A. 2012. “Monoids: Theme and Variations (Functional Pearl).” ACM SIGPLAN Notices 47 (12): 105–16. Young, Forrest W, Pedro M Valero-Mora, and Michael Friendly. 2011. Visual Statistics: Seeing Data with Dynamic Interactive Graphics. John Wiley &amp; Sons. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
