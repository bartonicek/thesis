[["goals.html", "3 Goals 3.1 User profile 3.2 Programming interface 3.3 User interface 3.4 Interactive features", " 3 Goals The primary aim of this doctoral project was to develop an original interactive data visualization system, while attempting to provide solutions to some of the problems described in Section 4. This was realized through the creation and publication of the R package plotscaper (available on CRAN) and the underlying JavaScript package plotscape (available on NPM). This section outlines some of the key concerns that informed the more specific design decisions that will be discussed in Section 6. 3.1 User profile A key first step in designing any kind of system is understanding the target user’s characteristics, including their expertise, motivations, and goals. This is particularly relevant in interactive data visualization systems, which, as was discussed in Section 2, serve a diverse range of users. At one end of the spectrum, some interactive data visualization systems are designed with fairly minimal expectations of the user’s level of experience and motivation. Conversely, other systems assume a highly motivated “expert” users with a sufficient level of domain expertise (Dimara and Perin 2019) or the ability to contend with low-level execution details such as rendering or reactive event graph (Satyanarayan et al. 2015, 2016). The goal was to design a package for interactive data exploration that would be accessible to a wide range of R users. Specifically, I wanted to give novice users the ability to quickly create comprehensive interactive figures they could use to explore their data, while, at the same time, allowing more advanced users to take advantage of the full range of features and engage in deeper customization. This informed the design of the package, leading to the prioritization of several key features: a simple and intuitive application programming interface with sensible defaults, an intuitive user interface, and a robust set of built-in interactive features. 3.2 Programming interface To make the package accessible to a wide range of R users, a key concern was designing a simple and intuitive application programming interface (API). Specifically, I wanted to make it easy for the average user to learn the package and produce fairly complete and useful interactive figures, with only few lines of R code. Ideally, the package should empower even users with limited programming experience to take advantage of interactive graphics. Achieving this level of accessibility required several design choices. First, the interface had to be simple and easy to learn, which was accomplished by drawing inspiration from established packages. Specifically, the main inspirations for the plotscaper API were the popular ggplot2 package (Wickham 2016), as well as the iplots package (Urbanek and Theus 2003; Urbanek 2011). However, plotscaper‘s design goals also necessitated some deviations from these packages’ APIs, see Section 6. Second, to further simplify the API, many of the components such as scales had to be given sensible defaults. Conversely, this also meant that extensive customizability was not a primary concern: the goal was to empower the users to start exploring their data quickly, rather than spend time making fine-grained adjustments to their figures. Third, to broaden its appeal, the package had to integrate seamlessly with existing tools within the R ecosystem. These include the popular RStudio IDE (Posit 2024) and the RMarkdown document-authoring system (Xie, Allaire, and Grolemund 2018). 3.3 User interface While ease of writing user code was a key consideration, equally important was the ease of interpreting and interacting with the resulting visualizations. The visual design of the figures needed to promote acquisition of statistical insights, and the figures’ interactive behavior had to be clear and intuitive. Effective visual design is crucial, as poor design can make figures less legible or even misleading (see e.g. Tufte 2001; Cairo 2014, 2019; Franconeri et al. 2021). Similarly, the design of interactions can either enhance or hinder the acquisition of insights. A general rule I applied to the design of the user interface in my package was “less is more”. Specifically, following Tufte’s (2001) example, I aimed to design figures that would prioritize data above all else. Visually, this was achieved by minimizing auxiliary graphical elements such as axis ticks, labels, and grid lines, and striving for a “pen and paper” aesthetic, as if the figures were drawn in a notebook. For color, I decided to use a muted colour palette for the non-data elements and an established color palette for representing data. Finally, when it came to interactive features, I approached those with similar minimalism as the visual design, trying to design them in a way that would enhance but not overwhelm the visual experience. 3.4 Interactive features The next important question was which interactive features to support. As was discussed in Section 2, there are many interactive data visualization features, and some are more useful (for data exploration) than others. Furthmore, implementing the amount of effort required to implement these features also differs considerably. Therefore, choosing the right set of features to implement was a key design consideration. As was hinted at throughout Section 2, the key feature to implement was generalized linked selection or brushing. Specifically, every plot in plotscaper should both support and be able to respond to selection. This feature was highly desirable because it allows the user to quickly explore trends across various dynamically generated subsets of the data, making it one of the most useful tools in interactive data visualization (Buja, Cook, and Swayne 1996; Heer and Shneiderman 2012; Wilhelm 2003, 2008; Wills 2008; Ware 2019; Ward, Grinstein, and Keim 2015). However, this feature also required a significant amount of careful planning and programming effort, since, as was discussed in section 4, it cannot be simply implemented on top of an existing static data visualization system. Instead, it has to be directly integrated into the data visualization pipeline. Other features which were also highly desirable and required a significant effort to implement were parameter manipulation and representation switching. Like linked selection, these features also to be integrated into the data visualization pipeline. “It only works ﬁne when we have individual plot symbols for each observation, as in scatterplots for example, where some attributes are changed by the user interaction. But even when replacing plot parameters the user loses the possibility to compare the current plot with previous versions. The user can only compare the current image with a mental copy of the previous image and hence the comparison might get distorted.” (Wilhelm 2008, 210) References Buja, Andreas, Dianne Cook, and Deborah F Swayne. 1996. “Interactive High-Dimensional Data Visualization.” Journal of Computational and Graphical Statistics 5 (1): 78–99. Cairo, Alberto. 2014. “Graphics Lies, Misleading Visuals: Reflections on the Challenges and Pitfalls of Evidence-Driven Visual Communication.” In New Challenges for Data Design, 103–16. Springer. ———. 2019. How Charts Lie: Getting Smarter about Visual Information. WW Norton &amp; Company. Dimara, Evanthia, and Charles Perin. 2019. “What Is Interaction for Data Visualization?” IEEE Transactions on Visualization and Computer Graphics 26 (1): 119–29. Franconeri, Steven L, Lace M Padilla, Priti Shah, Jeffrey M Zacks, and Jessica Hullman. 2021. “The Science of Visual Data Communication: What Works.” Psychological Science in the Public Interest 22 (3): 110–61. Heer, Jeffrey, and Ben Shneiderman. 2012. “Interactive Dynamics for Visual Analysis: A Taxonomy of Tools That Support the Fluent and Flexible Use of Visualizations.” Queue 10 (2): 30–55. Posit. 2024. “RStudio IDE.” https://posit.co/products/open-source/rstudio. Satyanarayan, Arvind, Dominik Moritz, Kanit Wongsuphasawat, and Jeffrey Heer. 2016. “Vega-Lite: A Grammar of Interactive Graphics.” IEEE Transactions on Visualization and Computer Graphics 23 (1): 341–50. Satyanarayan, Arvind, Ryan Russell, Jane Hoffswell, and Jeffrey Heer. 2015. “Reactive Vega: A Streaming Dataflow Architecture for Declarative Interactive Visualization.” IEEE Transactions on Visualization and Computer Graphics 22 (1): 659–68. Tufte, Edward R. 2001. The Visual Display of Quantitative Information. Cheshire, Connecticut: Graphics Press LLC. Urbanek, Simon. 2011. “iPlots eXtreme: Next-Generation Interactive Graphics Design and Implementation of Modern Interactive Graphics.” Computational Statistics 26 (3): 381–93. Urbanek, Simon, and Martin Theus. 2003. “iPlots: High Interaction Graphics for r.” In Proceedings of the 3rd International Workshop on Distributed Statistical Computing. Citeseer. Ward, Matthew O, Georges Grinstein, and Daniel Keim. 2015. Interactive Data Visualization: Foundations, Techniques, and Applications. CRC Press. Ware, Colin. 2019. Information Visualization: Perception for Design. Morgan Kaufmann. Wickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis (2e). Springer-Verlag New York. https://ggplot2.tidyverse.org. Wilhelm, Adalbert. 2003. “User interaction at various levels of data displays.” Comput. Statist. Data Anal. 43 (4): 471–94. https://doi.org/10.1016/S0167-9473(02)00288-8. ———. 2008. “Linked Views for Visual Exploration.” In Handbook of Data Visualization, 200–214. Springer Science &amp; Business Media. Wills, Graham. 2008. “Linked Data Views.” In Handbook of Data Visualization, 217–41. ch. II. 9. Springer Berlin/Heidelberg, Germany. Xie, Yihui, Joseph J Allaire, and Garrett Grolemund. 2018. R Markdown: The Definitive Guide. Chapman; Hall/CRC. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
